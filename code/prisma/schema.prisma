generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  openId        String?        @unique
  unionId       String?        @unique
  nickname      String?
  avatarUrl     String?
  gender        Int?
  language      String?
  city          String?
  province      String?
  country       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creditId      Int?           @unique
  roleId        Int?
  age           String?
  grade         String?
  school        String?
  sign_text     String?
  delete        Boolean        @default(false)
  mobile        String?
  token         String?        @unique
  bookHis       BookHis[]
  bookHisCount  BookHisCount[]
  code          Code[]
  credits       Credit?        @relation("UserCredit")
  creditHistory CreditHis[]
  roles         Role?          @relation(fields: [roleId], references: [id])
  User_Code     User_Code[]
  user_Info     User_Info[]

  @@index([roleId], map: "User_roleId_fkey")
}

model User_Code {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  used      Boolean  @default(false)
  delete    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "User_Code_userId_fkey")
}

model User_Info {
  id        Int      @id @default(autoincrement())
  avatar    String
  leftEyes  String
  rightEyes String
  height    String
  weight    String
  userId    Int
  delete    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  gender    Int
  birth     String
  age       Int
  career    String
  photo     String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "User_Info_userId_fkey")
}

model Role {
  id           Int          @id @default(autoincrement())
  name         String       @default("")
  description  String?
  permissionId String?
  createdAt    DateTime     @default(now())
  delete       Boolean      @default(false)
  updatedAt    DateTime     @updatedAt
  user         User[]
  permission   Permission[] @relation("PermissionToRole")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @default("")
  description String?
  createdAt   DateTime @default(now())
  delete      Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  Role        Role[]   @relation("PermissionToRole")
}

model Credit {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  credit    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  delete    Boolean  @default(false)
  user      User     @relation("UserCredit", fields: [userId], references: [id])
}

model CreditHis {
  id        Int      @id @default(autoincrement())
  credit    Int      @default(0)
  content   String?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  delete    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "CreditHis_userId_fkey")
}

model Material {
  id          Int           @id @default(autoincrement())
  url         String
  link        String?
  name        String
  content     String?
  mineType    Int           @default(1)
  delete      Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  banner      Banner[]      @relation("BannerToMaterial")
  book        Book[]        @relation("BookToMaterial")
  information Information[] @relation("InformationToMaterial")
  landing     Landing[]     @relation("LandingToMaterial")
  tips        Tips[]        @relation("MaterialToTips")
}

model Information {
  id        Int        @id @default(autoincrement())
  content   String?    @db.LongText
  name      String
  img       String?
  video     String?
  delete    Boolean?   @default(false)
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  type      String?    @default("1")
  mode      String?    @default("0") @db.VarChar(255)
  remark    String?
  material  Material[] @relation("InformationToMaterial")
}

model Landing {
  id        Int        @id @default(autoincrement())
  content   Json
  name      String
  type      Int        @default(1)
  delete    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  material  Material[] @relation("LandingToMaterial")
}

model Banner {
  id        Int        @id @default(autoincrement())
  content   String
  name      String
  img       String
  video     String
  delete    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  index     Int        @default(1)
  used      Boolean    @default(true)
  material  Material[] @relation("BannerToMaterial")
}

model Book {
  id           Int            @id @default(autoincrement())
  name         String
  url          String
  content      String
  delete       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  img          String
  isdefault    Boolean        @default(false)
  bookHis      BookHis[]
  bookHisCount BookHisCount[]
  code         Code[]
  material     Material[]     @relation("BookToMaterial")
}

model BookHisCount {
  id        Int      @id @default(autoincrement())
  time      Int
  count     Int
  content   String
  bookId    Int
  userId    Int
  delete    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([bookId], map: "BookHisCount_bookId_fkey")
  @@index([userId], map: "BookHisCount_userId_fkey")
}

model BookHis {
  id        Int      @id @default(autoincrement())
  time      Int
  count     Int
  content   String
  bookId    Int
  userId    Int
  delete    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([bookId], map: "BookHis_bookId_fkey")
  @@index([userId], map: "BookHis_userId_fkey")
}

model Code {
  id          Int       @id @default(autoincrement())
  bookId      Int
  code        String    @unique
  userId      Int?
  active      Boolean   @default(false)
  activatedAt DateTime?
  delete      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  book        Book      @relation(fields: [bookId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@index([bookId], map: "Code_bookId_fkey")
  @@index([userId], map: "Code_userId_fkey")
}

model Tips {
  id        Int        @id @default(autoincrement())
  content   String
  name      String
  img       String
  video     String?
  delete    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  material  Material[] @relation("MaterialToTips")
}

model Teach {
  id        Int      @id @default(autoincrement())
  type      String
  name      String
  avatar    String
  age       String
  city      String?
  province  String?
  gender    String
  video     String?
  delete    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  area      String
  content   String?
}

model School {
  id          Int      @id @default(autoincrement())
  type        String
  name        String
  city        String?
  province    String?
  nature      String
  school_type String
  delete      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  area        String
  content     String?
  img         String?
}

model CreditShop {
  id          Int      @id @default(autoincrement())
  name        String?
  image       String?
  content     String?
  isAvailable Boolean  @default(true)
  delete      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  credit      Int?
}

model CreditShopHis {
  id          Int      @id @default(autoincrement())
  ceditShopID Int
  name        String?
  image       String?
  content     String?
  userId      Int
  status      Int      @default(1)
  delete      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
